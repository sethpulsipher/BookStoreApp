@page "/books/"
@inject IBookService bookService
@inject IJSRuntime js

<PageTitle>Books</PageTitle>

@if (!response.Success)
{
    <div class="alert alert-info">
        <h4>@response.Message</h4>
    </div>
}
else
{
    @if (BooksList == null)
    {
        <div class="spinner"></div>
    }
    else
    {
        <div class="row">
            <div class="col-12 text-center">
                <h1>Books</h1>
            </div>
        </div>

        <div class="row mb-3">
            <AuthorizeView Roles="Administrator">
                @* Add New Book *@
                <div class="col">
                    <a href="/books/create/">
                        <span class="oi oi-plus" aria-hidden="true"></span> Add
                    </a>
                </div>
            </AuthorizeView>
        </div>

        <div class="table-responsive">
            <table class="table table-striped table-hover border">
                <thead class="table-dark">
                    <tr>
                        <th scope="col">Image</th>
                        <th scope="col" class="text-center">Title</th>
                        <th scope="col" class="text-center">Price</th>
                        <th scope="col" class="text-center">Author</th>
                        <th scope="col"></th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var book in BooksList)
                    {
                        <tr>
                            @* Image *@
                            <td><img src="@book.Image" width="120" height="170" alt="@book.Title" /></td>
                            @* Title *@
                            <td class="text-center align-middle">@book.Title</td>
                            @* Price *@
                            <td class="text-center align-middle">@book.Price.ToString("C")</td>
                            @* Author *@
                            <td class="text-center align-middle"><a href="/authors/details/@book.AuthorId">@book.AuthorName</a></td>
                            @* Actions *@
                            <td class="text-end align-middle">
                                <a class="btn btn-primary m-1" href="/books/details/@book.Id">
                                    <span class="oi oi-book" aria-hidden="true"></span> Details
                                </a>

                                <AuthorizeView Roles="Administrator">
                                    <MudMenu Class="pe-1">
                                        <ActivatorContent>
                                            <a>
                                                <svg xmlns="http://www.w3.org/2000/svg" width="16" height="16" fill="currentColor" class="bi bi-three-dots-vertical" viewBox="0 0 16 16">
                                                    <path d="M9.5 13a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0m0-5a1.5 1.5 0 1 1-3 0 1.5 1.5 0 0 1 3 0" />
                                                </svg>
                                            </a>
                                        </ActivatorContent>
                                        <ChildContent>
                                            <MudMenuItem><a href="books/edit/@book.Id">Edit</a></MudMenuItem>
                                            <MudMenuItem OnClick="@(() => Delete(book.Id))" Class="text-danger">Delete</MudMenuItem>
                                        </ChildContent>
                                    </MudMenu>
                                </AuthorizeView>
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    }
}


@code {
    private List<BookReadOnlyDto> BooksList;
    private Response<List<BookReadOnlyDto>> response = new Response<List<BookReadOnlyDto>> { Success = true };

    protected override async Task OnInitializedAsync()
    {
        var response = await bookService.Get();
        if (response.Success)
        {
            BooksList = response.Data;
        }
    }

    private async Task Delete(int bookId)
    {
        // Get the book to show the title
        var book = BooksList.First(q => q.Id == bookId);
        // Use JavaScript to prompt the user a confirmation alert
        var confirm = await js.InvokeAsync<bool>("confirm", $"Are You Sure You Want To Delete {book.Title}? \n\n YOU CANNOT UNDO THIS ACTION");
        if (confirm)
        {
            var response = await bookService.Delete(bookId);
            if (response.Success)
            {
                await OnInitializedAsync();
            }
        }
    }
}
