@page "/books/edit/{id:int}"
@inject IBookService bookService
@inject IAuthorService authorService
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Edit @BookModel.Title</PageTitle>

<h3>Edit Book</h3>

<EditForm Model="BookModel" OnValidSubmit="UpdateBookHandler">
    <DataAnnotationsValidator />
    <ValidationSummary />

    <div class="row mb-2">
        <label class="form-label" for="title">Title</label>
        <InputText class="form-control" @bind-Value="BookModel.Title" id="title" />
        <ValidationMessage For="@(() => BookModel.Title)" />
    </div>

    <div class="row mb-2">
        <label class="form-label" for="isbn">ISBN</label>
        <InputText class="form-control" @bind-Value="BookModel.Isbn" id="isbn" />
        <ValidationMessage For="@(() => BookModel.Isbn)" />
    </div>

    <div class="row mb-2">
        <label class="form-label" for="price">Price</label>
        <InputNumber class="form-control" @bind-Value="BookModel.Price" id="price" />
        <ValidationMessage For="@(() => BookModel.Price)" />
    </div>

    <div class="row mb-2">
        <label class="form-label" for="year">Year</label>
        <InputNumber class="form-control" @bind-Value="BookModel.Year" id="year" />
        <ValidationMessage For="@(() => BookModel.Year)" />
    </div>

    <div class="row mb-2">
        <label class="form-label" for="summary">Summary</label>
        <InputTextArea class="form-control" @bind-Value="BookModel.Summary" id="summary" />
        <ValidationMessage For="@(() => BookModel.Summary)" />
    </div>

    <div class="row mb-2">
        <label class="form-label" for="author">Author</label>
        <InputSelect class="form-control" @bind-Value="BookModel.AuthorId" id="author">
            <option value="">-- Select Author --</option>
            @foreach (var author in Authors)
            {
                <option value="@author.Id">@author.FirstName @author.LastName</option>
            }
        </InputSelect>
    </div>

    <div class="row mb-2">
        <label class="form-label" for="photo">Book Cover Photo</label>

        <InputFile class="form-control" OnChange="FileSelectionHandler" id="photo" />
        <img src="@img" class="img-thumbnail" style="max-height: 120px; max-width: 100px;" />
        <p class="text-danger">@UploadFileWarning</p>
    </div>

    <div class="row row-cols-auto mb-2">
        <button type="submit" class="btn btn-primary ">
            <span class="oi oi-check" aria-hidden="true"></span> Confirm
        </button>

        <button type="button" @onclick="BackToList" class="btn btn-outline-secondary mx-2">
            <span class="oi oi-arrow-left" aria-hidden="true"></span> Back
        </button>
    </div>

</EditForm>

@code {
    [Parameter]
    public int id { get; set; }

    private BookUpdateDto BookModel = new();
    private List<AuthorReadOnlyDto> Authors = new();

    private string img = string.Empty;
    private string UploadFileWarning = string.Empty;
    private long maxFileSize = 1024 * 1024 * 5;    

    protected async override Task OnInitializedAsync()
    {
        var response = await bookService.GetForUpdate(id);
        if (response.Success)
        {
            BookModel = response.Data;
        }
        var authorResponse = await authorService.Get();
        if (authorResponse.Success)
        {
            Authors = authorResponse.Data;
        }
    }

    private async Task UpdateBookHandler()
    {
        var response = await bookService.Edit(id, BookModel);
        if (response.Success)
        {
            BackToList();
        }
    }

    private async Task FileSelectionHandler(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file != null)
        {
            if(file.Size > maxFileSize)
            {
                UploadFileWarning = "This file is too big for upload.";
                return;
            }

            var ext = System.IO.Path.GetExtension(file.Name);
            if ( !(ext.ToLower().Contains("jpg") || ext.ToLower().Contains("png") || ext.ToLower().Contains("jpeg")) )
            {
                UploadFileWarning = "Please select a valid image file (*.jpg | *.png)";
                return;
            }

            var byteArray = new byte[file.Size];
            await file.OpenReadStream().ReadAsync(byteArray);
            string imageType = file.ContentType;
            string base64string = Convert.ToBase64String(byteArray);

            BookModel.ImageData = base64string;
            BookModel.ImageName = file.Name;
            img = $"data:{imageType}; base64, {base64string}";
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/books/");
    }
}
