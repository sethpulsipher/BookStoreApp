@page "/authors/edit/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navManager
@attribute [Authorize(Roles = "Administrator")]

<PageTitle>Edit Author</PageTitle>

<div class="container">
    <div class="row row-cols-auto">
        <BackButton backLink="/authors/"></BackButton>
        <h3>Edit Author</h3>
    </div>

    <div>
        <EditForm Model="AuthorModel" OnValidSubmit="UpdateAuthorHandler">
            <DataAnnotationsValidator />
            <ValidationSummary />

            <div class="form-group">
                <label class="form-label" for="firstName">First Name</label>
                <InputText class="form-control" @bind-Value="AuthorModel.FirstName" id="lastName" />
                <ValidationMessage For="@(() => AuthorModel.FirstName)" />
            </div>

            <div class="form-group">
                <label class="form-label" for="lastName">Last Name</label>
                <InputText class="form-control" @bind-Value="AuthorModel.LastName" id="lastName" />
                <ValidationMessage For="@(() => AuthorModel.LastName)" />
            </div>

            <div class="form-group">
                <label class="form-label" for="alias">Alias (AKA)</label>
                <InputText class="form-control" @bind-Value="AuthorModel.Alias" id="alias" />
                <ValidationMessage For="@(() => AuthorModel.Alias)" />
            </div>

            <div class="form-group">
                <label class="form-label" for="bio">Bio</label>
                <InputTextArea class="form-control" @bind-Value="AuthorModel.Bio" id="bio" />
                <ValidationMessage For="@(() => AuthorModel.Bio)" />
            </div>
            <br />


            <button type="submit" class="btn btn-primary">
                <span class="oi oi-pencil" aria-hidden="true"></span> Update Author
            </button>


        </EditForm>
    </div>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private AuthorUpdateDto AuthorModel = new();

    protected async override Task OnInitializedAsync()
    {
        var response = await authorService.GetForUpdate(id);
        if(response.Success)
        {
            AuthorModel = response.Data;
        }
    }

    private async Task UpdateAuthorHandler()
    {
        var response = await authorService.Edit(id, AuthorModel);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }
}
