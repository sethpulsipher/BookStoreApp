@page "/authors/update/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navManager

<PageTitle>Edit Author</PageTitle>

<h3>Edit Author</h3>

<div>
    <EditForm Model="AuthorModel" OnValidSubmit="UpdateAuthorHandler">
        <DataAnnotationsValidator />
        <ValidationSummary />

        <div class="form-group">
            <label for="firstName">First Name</label>
            <InputText class="form-control" @bind-Value="AuthorModel.FirstName" id="lastName" />
            <ValidationMessage For="@(() => AuthorModel.FirstName)" />
        </div>

        <div class="form-group">
            <label for="lastName">Last Name</label>
            <InputText class="form-control" @bind-Value="AuthorModel.LastName" id="lastName" />
            <ValidationMessage For="@(() => AuthorModel.LastName)" />
        </div>

        <div class="form-group">
            <label for="bio">Bio</label>
            <InputTextArea class="form-control" @bind-Value="AuthorModel.Bio" id="bio" />
            <ValidationMessage For="@(() => AuthorModel.Bio)" />
        </div>
        <br/>

        <div>
            <button type="submit" class="btn btn-primary">
                <span class="oi oi-pencil" aria-hidden="true"></span> Update Author
            </button>

            <button @onclick="BackToList" class="btn btn-outline-secondary">
                <span class="oi oi-arrow-left" aria-hidden="true"></span> Back
            </button>
        </div>

    </EditForm>
</div>

@code {
    [Parameter]
    public int id { get; set; }

    private AuthorUpdateDto AuthorModel = new AuthorUpdateDto();

    protected async override Task OnInitializedAsync()
    {
        var response = await authorService.GetAuthorForUpdateAsync(id);
        if(response.Success)
        {
            AuthorModel = response.Data;
        }
    }

    private async Task UpdateAuthorHandler()
    {
        var response = await authorService.UpdateAuthorAsync(id, AuthorModel);
        if (response.Success)
        {
            BackToList();
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }
}
