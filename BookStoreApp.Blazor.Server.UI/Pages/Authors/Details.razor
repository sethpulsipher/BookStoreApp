@page "/authors/details/{id:int}"
@inject IAuthorService authorService
@inject NavigationManager navManager

<PageTitle>Author Details</PageTitle>

<div class="container">

    <div class="row">  
        <h3>Author Details</h3>
    </div>

    <div>
        <EditForm Model="AuthorModel">
            <fieldset disabled="true">

                <div class="row mb-2">

                    <div class="col">
                        <label class="form-label" for="firstName">First Name</label>
                        <InputText class="form-control" @bind-Value="AuthorModel.FirstName" id="firstName" />
                        <ValidationMessage For="@(() => AuthorModel.FirstName)" />
                    </div>

                    <div class="col">
                        <label class="form-label" for="lastName">Last Name</label>
                        <InputText class="form-control" @bind-Value="AuthorModel.LastName" id="lastName" />
                        <ValidationMessage For="@(() => AuthorModel.LastName)" />
                    </div>

                </div>

                <div class="col mb-2">
                    <label class="form-label" for="bio">Bio</label>
                    <InputTextArea class="form-control" @bind-Value="AuthorModel.Bio" id="bio" />
                    <ValidationMessage For="@(() => AuthorModel.Bio)" />
                </div>
                
            </fieldset>

            <div class="row row-cols-auto mb-2">
                <div>
                    <AuthorizeView Roles="Administrator" Context="authContext">
                        <button @onclick="GoToEdit" class="btn btn-outline-warning">
                            <span class="oi oi-pencil" aria-hidden="true"></span> Edit Author
                        </button>
                    </AuthorizeView>

                    <button type="button" @onclick="BackToList" class="btn btn-outline-secondary">
                        <span class="oi oi-arrow-left" aria-hidden="true"></span> Back
                    </button>
                </div>
            </div>
            

            @if (AuthorModel.Books == null || AuthorModel.Books.Any() == false)
            {
                <div class="alert alert-dismissible alert-secondary">
                    No Books for this Author
                </div>
            }
            else
            {
                <div class="row">
                    @foreach (var book in AuthorModel.Books)
                    {
                    <div class="col-3">
                        <div class="card" style="width: 18rem;">
                            
                            <img class="card-img-top" src="@book.Image" alt="@book.Title" style="width: 286px; height: 164px;">
                            
                            <div class="card-body">
                                <h5 class="card-title">@book.Title - @book.Price.ToString("C")</h5>
                                <p class="card-text"></p>
                                <a href="/books/details/@book.Id" class="btn btn-primary">View Book</a>
                            </div>
                        
                        </div>
                    </div>
                    }
                </div>
            }

        </EditForm>
    </div>

</div>

@code {
    [Parameter]
    public int id { get; set; }

    private AuthorDetailsDto AuthorModel = new();

    protected async override Task OnInitializedAsync()
    {
        var response = await authorService.Get(id);
        if (response.Success)
        {
            AuthorModel = response.Data;
        }
    }

    private void BackToList()
    {
        navManager.NavigateTo("/authors/");
    }

    private void GoToEdit()
    {
        navManager.NavigateTo($"/authors/update/{AuthorModel.Id}");
    }
}
